(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{404:function(v,_,t){"use strict";t.r(_);var e=t(51),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"greenplum架构介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#greenplum架构介绍"}},[v._v("#")]),v._v(" Greenplum架构介绍")]),v._v(" "),t("h2",{attrs:{id:"什么是mpp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是mpp"}},[v._v("#")]),v._v(" 什么是MPP")]),v._v(" "),t("p",[t("strong",[v._v("MPP (Massively Parallel Processing)：")])]),v._v(" "),t("p",[v._v("大规模并行处理系统，由许多松耦合处理单元组成的。每个单元内的CPU都有自己私有的资源，如总线、内存、硬盘等。在每个单元内都有操作系统和管理数据库的实例副本，这种结构最大的特点在于不共享资源。")]),v._v(" "),t("p",[v._v("MPP架构数据库应具有的特征：")]),v._v(" "),t("ul",[t("li",[v._v("任务并行执行")]),v._v(" "),t("li",[v._v("数据分布式存储（本地化）")]),v._v(" "),t("li",[v._v("分布式计算")]),v._v(" "),t("li",[v._v("私有资源")]),v._v(" "),t("li",[v._v("横向扩展")]),v._v(" "),t("li",[v._v("Shared Nothing架构")])]),v._v(" "),t("p",[t("strong",[v._v("典型的MPP数据库")])]),v._v(" "),t("ul",[t("li",[v._v("Greenplum")]),v._v(" "),t("li",[v._v("Vertica（HP）")]),v._v(" "),t("li",[v._v("IBM DB2 WED")]),v._v(" "),t("li",[v._v("Gbase")]),v._v(" "),t("li",[v._v("Teradata")])]),v._v(" "),t("p",[v._v("在 MPP 系统中，每个 SMP(对称多处理系统)节点也可以运行自己的操作系统、数据库等。换言之，每个节点内的 CPU 不能访问另一个节点的内存。节点之间的信息交互是通过节点互联网络实现的，MPP系统因为要在不同处理单元之间传送信息，所以它的效率要比SMP要差一点，但是这也不是绝对的，因为 MPP系统不共享资源，因此对它而言，资源比SMP要多，当需要处理的事务达到一定规模时，MPP的效率要比SMP好。这就是看通信时间占用计算时间的比例而定，如果通信时间比较多，那MPP系统就不占优势了，相反，如果通信时间比较少，那MPP系统可以充分发挥资源的优势，达到高效率。")]),v._v(" "),t("h2",{attrs:{id:"mpp架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mpp架构"}},[v._v("#")]),v._v(" MPP架构")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-mpp-jiagou.png",alt:""}})]),v._v(" "),t("p",[v._v("还有一种多master的架构（配合zookeeper），HBase，Cassandra本身只有存储能力，如果要做查询需要借助Hadoop这样的框架进行，Hive就是把查询都编译成Hadoop任务实现的。Hadoop的查询效率要比关系型数据库要低，主要是因为:")]),v._v(" "),t("p",[v._v("1）Hadoop为了保证容错，中间数据都要走一遍磁盘，IO开销大；")]),v._v(" "),t("p",[v._v("2）Hadoop缺少查询优化引擎还有索引等优化机制。")]),v._v(" "),t("p",[v._v("大数据好多人认为就是Hadoop。实际上Hadoop只是大数据若干处理方案中的一个。现在的SQL、NoSQL、NewSQL、Hadoop等等，都能在不同层面或不同应用上处理大数据的某些问题。而Greenplum数据库做为一个分布式大规模并行处理数据库，在大多数情况下，更适合做大数据的存储引擎、计算引擎和分析引擎。")]),v._v(" "),t("h2",{attrs:{id:"什么是greenplum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是greenplum"}},[v._v("#")]),v._v(" 什么是Greenplum")]),v._v(" "),t("p",[t("strong",[v._v("为数不多的开源关系型分析型数据库")])]),v._v(" "),t("p",[v._v("Greenplum 之前是一家总部位于美国加州，为全球大型企业用户提供新型企业级数据仓库(EDW)、企业级数据云(EDC)和商务智能(BI)提供解决方案和咨询服务的公司。")]),v._v(" "),t("p",[v._v("EMC2010收购这家数据仓储技术提供商Greenplum 公司，在收购完成后，EMC以Greenplum为基础，在信息基础设施业务中组建新的数据计算产品部门。")]),v._v(" "),t("p",[v._v("目前 Greenplum 已经归属 Pivotal ( Pivotal 是 EMC主导的独立运行的公司，EMC 把Greenplum DB注入到Pivotal 旗下，类似于EMC与VMWARE的关系)。2015年10月宣布开源。目前已迭代至6.0版本。")]),v._v(" "),t("p",[t("strong",[v._v("特色：")])]),v._v(" "),t("ul",[t("li",[v._v("开源")]),v._v(" "),t("li",[v._v("关系型MPP数据库，支持标准SQL及OLAP扩展（如：窗口函数）")]),v._v(" "),t("li",[v._v("适合OLAP应用")]),v._v(" "),t("li",[v._v("支持分布式事务，支持ACID")]),v._v(" "),t("li",[v._v("基于POSTGRESQL，但不是所有特性都能使用\n"),t("ul",[t("li",[v._v("相同的客户端功能")]),v._v(" "),t("li",[v._v("增加并行处理")]),v._v(" "),t("li",[v._v("资源管理")]),v._v(" "),t("li",[v._v("查询优化器增强，ORCA优化器")]),v._v(" "),t("li",[v._v("没有触发器、不能指定表空间、不推荐使用外键及索引、不能在function中建立新的保存点")])])]),v._v(" "),t("li",[v._v("扩展性")])]),v._v(" "),t("h2",{attrs:{id:"greenplum体系结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#greenplum体系结构"}},[v._v("#")]),v._v(" Greenplum体系结构")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-system.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"master"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master"}},[v._v("#")]),v._v(" Master")]),v._v(" "),t("p",[v._v("Master负责处理连接，通过元数据及统计信息生成执行计划，拆分执行计划，然后分发到segment，segment把自己执行的结果返回给master，master再返回给client。")]),v._v(" "),t("p",[v._v("Greenplum的最小并行单元不是节点层级，而是在实例层级，在一个节点上有多个Postgresql数据库同时并行工作，可以充分利用到每个节点的所有CPU和IO能力。")]),v._v(" "),t("ul",[t("li",[v._v("访问系统的入口")]),v._v(" "),t("li",[v._v("数据库侦听进程（postgres）处理所有用户连接")]),v._v(" "),t("li",[v._v("建立查询计划，分发计划")]),v._v(" "),t("li",[v._v("协调工作处理过程")]),v._v(" "),t("li",[v._v("管理工具")]),v._v(" "),t("li",[v._v("系统目录表及元数据（数据字典）")]),v._v(" "),t("li",[v._v("不存放任何用户数据")])]),v._v(" "),t("h3",{attrs:{id:"master高可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master高可用"}},[v._v("#")]),v._v(" Master高可用")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-master-ha.png",alt:""}})]),v._v(" "),t("p",[v._v("standby实时与master节点的catalog和事务日志保持同步，master损坏时，standby提供master服务")]),v._v(" "),t("h2",{attrs:{id:"segment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#segment"}},[v._v("#")]),v._v(" Segment")]),v._v(" "),t("p",[v._v("存贮用户数据的一部分，执行query，至少1CPU core、4G内存、单独网络接口。木桶原理，整体性能取决于最差的那个segment。")]),v._v(" "),t("ul",[t("li",[v._v("分段存放数据")]),v._v(" "),t("li",[v._v("一个segment host部署多个segment实例")]),v._v(" "),t("li",[v._v("实例级别的并行")]),v._v(" "),t("li",[v._v("一个系统多个段")]),v._v(" "),t("li",[v._v("用户不能直接访问段数据")]),v._v(" "),t("li",[v._v("所有对段的访问都要经过master")]),v._v(" "),t("li",[v._v("数据库监听进程(postgres)监听来自master 的连接")]),v._v(" "),t("li",[v._v("木桶效应")])]),v._v(" "),t("h3",{attrs:{id:"segment高可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#segment高可用"}},[v._v("#")]),v._v(" Segment高可用")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-segment-ha.png",alt:""}})]),v._v(" "),t("p",[v._v("通过物理block的复制来实现primary与mirror的一致(6.0版本已改成基于pg流复制)，目前gp仅支持一个primary对应一个mirror。")]),v._v(" "),t("p",[v._v("如果是内存表则通过事务日志去应用。")]),v._v(" "),t("p",[v._v("Append-optimized tables实时同步")]),v._v(" "),t("p",[v._v("Primary失败后mirror接管成为新的Primary，原来的Primary恢复后将成为新的mirror。")]),v._v(" "),t("h2",{attrs:{id:"interconnect高速互联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interconnect高速互联"}},[v._v("#")]),v._v(" Interconnect高速互联")]),v._v(" "),t("p",[v._v("使用UDPIFC协议。")]),v._v(" "),t("p",[t("strong",[v._v("UDPIFC=UDP+流控制（额外的数据验证），可靠性与TCP一致。")])]),v._v(" "),t("p",[v._v("TCP官方限制1000，实际上有可能更少。")]),v._v(" "),t("ul",[t("li",[v._v("支持TCP、UDP、UDPIFC")]),v._v(" "),t("li",[v._v("TCP限制segment数量是1000个")]),v._v(" "),t("li",[v._v("节点之间的数据传输")]),v._v(" "),t("li",[v._v("基于千兆以太网架构")]),v._v(" "),t("li",[v._v("属于系统内部私网配置")]),v._v(" "),t("li",[v._v("交换机冗余")]),v._v(" "),t("li",[v._v("网卡冗余")])]),v._v(" "),t("h2",{attrs:{id:"存贮模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存贮模型"}},[v._v("#")]),v._v(" 存贮模型")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-store-model.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"行存贮"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行存贮"}},[v._v("#")]),v._v(" 行存贮")]),v._v(" "),t("ul",[t("li",[v._v("访问多列时速度快")]),v._v(" "),t("li",[v._v("更新和删除更高效")]),v._v(" "),t("li",[v._v("通过AO优化插入")]),v._v(" "),t("li",[v._v("行比较小")])]),v._v(" "),t("h3",{attrs:{id:"列存贮"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列存贮"}},[v._v("#")]),v._v(" 列存贮")]),v._v(" "),t("ul",[t("li",[v._v("更高的压缩比")]),v._v(" "),t("li",[v._v("查询列子集速度快")]),v._v(" "),t("li",[v._v("不同的数据类型")]),v._v(" "),t("li",[v._v("可以使用不同的压缩算法")]),v._v(" "),t("li",[v._v("大的事实表")])]),v._v(" "),t("h3",{attrs:{id:"外部表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外部表"}},[v._v("#")]),v._v(" 外部表")]),v._v(" "),t("ul",[t("li",[v._v("历史数据和不常访问")]),v._v(" "),t("li",[v._v("的数据存储在HDFS或者")]),v._v(" "),t("li",[v._v("其他外部系统中")]),v._v(" "),t("li",[v._v("支持Txet，CSV，Avro，Parquet格式")])]),v._v(" "),t("h2",{attrs:{id:"数据分布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据分布"}},[v._v("#")]),v._v(" 数据分布")]),v._v(" "),t("p",[v._v("数据均匀，并行的第一原则。")]),v._v(" "),t("p",[v._v("分布规则："),t("strong",[v._v("随机、HASH")]),v._v("。")]),v._v(" "),t("p",[v._v("默认使用主键或者第一个字段进行哈希分布，还支持随机分布。除了横向上数据可以按节点分布之外，在某个节点上还可以对数据进行分区。分区的规则比较灵活，可以按照范围、hash、list。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/gp/gp-data-distribution.png",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"并行数据加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行数据加载"}},[v._v("#")]),v._v(" 并行数据加载")]),v._v(" "),t("ul",[t("li",[v._v("并行数据加载，？T/小时")]),v._v(" "),t("li",[v._v("数据源：数据源支持Hadoop，文件系统，数据库，还有ETL管理的数据")]),v._v(" "),t("li",[v._v("数据格式：文本，CSV，Parquet，Avro等")])]),v._v(" "),t("h2",{attrs:{id:"功能及限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#功能及限制"}},[v._v("#")]),v._v(" 功能及限制")]),v._v(" "),t("ul",[t("li",[v._v("支持ORCA优化器")]),v._v(" "),t("li",[v._v("基于POSTGRESQL支持绝大部分语法和数据类型")]),v._v(" "),t("li",[v._v("支持SQL 2003语法，支持窗口函数")]),v._v(" "),t("li",[v._v("支持复杂的数据格式存储，ARRAY，自定义类型，不支持JSON")]),v._v(" "),t("li",[v._v("支持BTREE, BITMAP, GIST 索引，不支持GIN索引")]),v._v(" "),t("li",[v._v("支持扩展的语言Perl、PYTHON、JAVA、C、C++")]),v._v(" "),t("li",[v._v("开源版本还未支持HADOOP、GPTEXT")]),v._v(" "),t("li",[v._v("PostGIS插件，支持地理信息数据存贮和分析")]),v._v(" "),t("li",[v._v("MADlib插件，机器学习方面的算法函数库")]),v._v(" "),t("li",[v._v("orafunc插件，兼容Oracle的部分函数")]),v._v(" "),t("li",[v._v("……")])]),v._v(" "),t("h2",{attrs:{id:"greenplum-vs-vertica"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#greenplum-vs-vertica"}},[v._v("#")]),v._v(" Greenplum VS Vertica")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("Name")]),v._v(" "),t("th",[v._v("Greenplum")]),v._v(" "),t("th",[v._v("Vertica")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Model")]),v._v(" "),t("td",[v._v("Relational DBMS")]),v._v(" "),t("td",[v._v("Relational DBMS")])]),v._v(" "),t("tr",[t("td",[v._v("License")]),v._v(" "),t("td",[v._v("Open Source")]),v._v(" "),t("td",[v._v("commercial")])]),v._v(" "),t("tr",[t("td",[v._v("Secondary indexes")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("no")])]),v._v(" "),t("tr",[t("td",[v._v("SQL")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("yes")])]),v._v(" "),t("tr",[t("td",[v._v("APIs and other access methods")]),v._v(" "),t("td",[v._v("JDBC、ODBC")]),v._v(" "),t("td",[v._v("ADO.NET、JDBC、ODBC")])]),v._v(" "),t("tr",[t("td",[v._v("Supported programming languages")]),v._v(" "),t("td",[v._v("C、Java、Perl、Python、R")]),v._v(" "),t("td",[v._v("C、Java、Perl、Python、R")])]),v._v(" "),t("tr",[t("td",[v._v("Triggers")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("no")])]),v._v(" "),t("tr",[t("td",[v._v("Partitioning methods")]),v._v(" "),t("td",[v._v("Sharding")]),v._v(" "),t("td",[v._v("Sharding")])]),v._v(" "),t("tr",[t("td",[v._v("Replication methods")]),v._v(" "),t("td",[v._v("Master-slave replication")]),v._v(" "),t("td",[v._v("Master-master replication")])]),v._v(" "),t("tr",[t("td",[v._v("MapReduce")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("yes")])]),v._v(" "),t("tr",[t("td",[v._v("Consistency concepts")]),v._v(" "),t("td",[v._v("Immediate Consistency")]),v._v(" "),t("td",[v._v("Immediate Consistency")])]),v._v(" "),t("tr",[t("td",[v._v("Foreign keys")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("yes")])]),v._v(" "),t("tr",[t("td",[v._v("Transaction concepts")]),v._v(" "),t("td",[v._v("ACID")]),v._v(" "),t("td",[v._v("ACID")])]),v._v(" "),t("tr",[t("td",[v._v("Concurrency")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("yes")])]),v._v(" "),t("tr",[t("td",[v._v("Durability")]),v._v(" "),t("td",[v._v("yes")]),v._v(" "),t("td",[v._v("yes")])]),v._v(" "),t("tr",[t("td",[v._v("User concepts")]),v._v(" "),t("td",[v._v("fine grained access rights according to SQL-standard")]),v._v(" "),t("td",[v._v("fine grained access rights according to SQL-standard")])])])]),v._v(" "),t("h2",{attrs:{id:"后记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后记"}},[v._v("#")]),v._v(" 后记")]),v._v(" "),t("p",[v._v("说了这么多，你是不是着急要自己试一试呢，立即跟随"),t("RouterLink",{attrs:{to:"/2019/09/13/greenplum-ha-install/"}},[v._v("Greenplum高可用部署")]),v._v("来实战吧。")],1)])}),[],!1,null,null,null);_.default=a.exports}}]);